
import socket, struct, time, telnetlib, re, sys, os

class Socket:
	def __init__(self, server, sock=None):
		if sock is None:
			self.socket = socket.create_connection(server)
		else:
			self.socket = sock
		self.delimiter = None
		self.f = self.socket.makefile("rw", bufsize=0)
	def recv_until(self, string=None):
		if string is None:
			string = self.delimiter
		buf = ""
		while not buf.endswith(string):
			r = self.f.read(1)
			buf += r
			if len(r) == 0:
				raise socket.error(buf)
		return buf[:-len(string)]
	def ru(self, string=None):
		return self.recv_until(string)
	def send(self, string):
		self.f.write(str(string))
	def recv(self, amount=1024):
		return self.socket.recv(amount)
	def interact(self):
		t = telnetlib.Telnet()
		t.sock = self.socket
		t.interact()
	def close(self):
		self.socket.close()
	def get_sock(self):
		return self.socket
	def delim(self, d):
		self.delimiter = d




PORT = 8080


###

def http_response(resp):
	resp = """HTTP/1.1 200 OK
Server: Tasteless hax machine
Content-Type: text/html

%s

""".replace("\n", "\r\n") % resp
	return resp



###

ss = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
ss.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
ss.bind(("", PORT))
ss.listen(1)

s, info = ss.accept()
s = Socket((), sock=s)
print "got a client:", info
s.ru("\r\n\r\n")


resp = open("exploit.html").read()
print s.send(http_response(resp))


print "served!"

